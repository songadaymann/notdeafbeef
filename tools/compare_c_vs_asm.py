#!/usr/bin/env python3
"""
Compare C vs ASM WAV files
Analyzes differences between C and ASM implementations of the same sounds.
"""

import hashlib
import subprocess
from pathlib import Path
import sys

def compute_hash(file_path):
    """Compute SHA-256 hash of a file"""
    if not file_path.exists():
        return None
    with open(file_path, 'rb') as f:
        return hashlib.sha256(f.read()).hexdigest()

def get_file_size(file_path):
    """Get file size in bytes"""
    if not file_path.exists():
        return None
    return file_path.stat().st_size

def play_wav(file_path):
    """Play a WAV file using system audio player"""
    if not file_path.exists():
        print(f"File not found: {file_path}")
        return
    
    try:
        # Try afplay on macOS
        subprocess.run(["afplay", str(file_path)], check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        try:
            # Try system open command
            subprocess.run(["open", str(file_path)], check=True)
        except (subprocess.CalledProcessError, FileNotFoundError):
            print(f"Could not play {file_path} - no audio player found")

def main():
    if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help']:
        print("Usage: python compare_c_vs_asm.py")
        print("       python compare_c_vs_asm.py --play <sound_name>")
        print("")
        print("Compare C vs ASM WAV files generated by generate_comprehensive_tests.py")
        print("")
        print("Options:")
        print("  --play <sound_name>  Play both C and ASM versions of a sound")
        print("  -h, --help          Show this help message")
        return

    script_root = Path(__file__).parent
    project_root = script_root.parent
    output_dir = project_root / "output"
    c_dir = output_dir / "c"
    asm_dir = output_dir / "asm"

    if not c_dir.exists() or not asm_dir.exists():
        print("‚ùå Output directories not found!")
        print(f"   Expected: {c_dir}")
        print(f"   Expected: {asm_dir}")
        print("")
        print("Run generate_comprehensive_tests.py first to generate WAV files.")
        return

    # Handle --play option
    if len(sys.argv) > 2 and sys.argv[1] == '--play':
        sound_name = sys.argv[2]
        
        # Find matching files
        c_files = list(c_dir.glob(f"c_*{sound_name}*"))
        asm_files = list(asm_dir.glob(f"asm_*{sound_name}*"))
        
        if not c_files and not asm_files:
            print(f"‚ùå No files found matching '{sound_name}'")
            return
            
        print(f"üéµ Playing sounds matching '{sound_name}':")
        for c_file in c_files:
            print(f"   C version: {c_file.name}")
            play_wav(c_file)
            input("   Press Enter to continue...")
            
        for asm_file in asm_files:
            print(f"   ASM version: {asm_file.name}")
            play_wav(asm_file)
            input("   Press Enter to continue...")
        return

    # Get all C and ASM files
    c_files = sorted(c_dir.glob("c_*.wav"))
    asm_files = sorted(asm_dir.glob("asm_*.wav"))

    # Create mapping of sound names
    sound_map = {}
    
    for c_file in c_files:
        sound_name = c_file.name[2:]  # Remove "c_" prefix
        if sound_name not in sound_map:
            sound_map[sound_name] = {}
        sound_map[sound_name]['c'] = c_file
    
    for asm_file in asm_files:
        sound_name = asm_file.name[4:]  # Remove "asm_" prefix  
        if sound_name not in sound_map:
            sound_map[sound_name] = {}
        sound_map[sound_name]['asm'] = asm_file

    print("üîç C vs ASM WAV File Comparison")
    print("=" * 80)
    print(f"C files found:   {len(c_files)}")
    print(f"ASM files found: {len(asm_files)}")
    print(f"Sound types:     {len(sound_map)}")
    print()

    # Compare each sound
    print("Sound                     | C Size    | ASM Size  | Hash Match | Status")
    print("-" * 75)

    identical_count = 0
    different_count = 0
    missing_count = 0

    for sound_name in sorted(sound_map.keys()):
        sound_data = sound_map[sound_name]
        c_file = sound_data.get('c')
        asm_file = sound_data.get('asm')
        
        # Get file info
        c_size = get_file_size(c_file) if c_file else None
        asm_size = get_file_size(asm_file) if asm_file else None
        
        c_hash = compute_hash(c_file) if c_file else None
        asm_hash = compute_hash(asm_file) if asm_file else None
        
        # Format sizes
        c_size_str = f"{c_size:,}" if c_size else "MISSING"
        asm_size_str = f"{asm_size:,}" if asm_size else "MISSING"
        
        # Compare hashes
        if c_hash and asm_hash:
            hash_match = "‚úÖ Yes" if c_hash == asm_hash else "‚ùå No"
            if c_hash == asm_hash:
                status = "Identical"
                identical_count += 1
            else:
                status = "Different"
                different_count += 1
        else:
            hash_match = "‚ùì N/A"
            status = "Missing file(s)"
            missing_count += 1
        
        print(f"{sound_name:<25} | {c_size_str:>9} | {asm_size_str:>9} | {hash_match:<10} | {status}")

    print()
    print("üìä SUMMARY")
    print("-" * 30)
    print(f"Identical:     {identical_count}")
    print(f"Different:     {different_count}")  
    print(f"Missing files: {missing_count}")
    print(f"Total sounds:  {len(sound_map)}")

    if different_count > 0:
        print()
        print("üîç Sounds with differences:")
        for sound_name in sorted(sound_map.keys()):
            sound_data = sound_map[sound_name]
            c_file = sound_data.get('c')
            asm_file = sound_data.get('asm')
            
            if c_file and asm_file:
                c_hash = compute_hash(c_file)
                asm_hash = compute_hash(asm_file)
                if c_hash != asm_hash:
                    c_size = get_file_size(c_file)
                    asm_size = get_file_size(asm_file)
                    print(f"   {sound_name}: C={c_size:,} bytes, ASM={asm_size:,} bytes")

    print()
    print("üéß To audition a specific sound:")
    print(f"   python {Path(__file__).name} --play <sound_name>")
    print("   Example: python compare_c_vs_asm.py --play kick")

if __name__ == "__main__":
    main() 